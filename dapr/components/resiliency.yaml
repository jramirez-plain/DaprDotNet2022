apiVersion: dapr.io/v1alpha1
kind: Resiliency
metadata:
  name: resiliency
#scopes:
#  - capacityplanner
#  - catalog
#  - rater
spec:
  # policies is where timeouts, retries and circuit breaker policies are defined. 
  # each is given a name so they can be referred to from the targets section in the resiliency spec.
  policies:
    # timeouts are simple named durations.
    timeouts:
      general: 3s
      large: 10s

    # retries are named templates for retry configurations and are instantiated for life of the operation.
    #retries:
    #  pubsubRetry:
    #    policy: constant
    #    duration: 5s
    #    maxRetries: 10

    #  retryExponencialLong:
    #    policy: exponential
    #    maxInterval: 60s
    #    maxRetries: 5 

    # circuit breakers are automatically instantiated per component and app instance.
    # circuit breakers maintain counters that live as long as the Dapr sidecar is running. They are not persisted.
    circuitBreakers:
      simpleCB:
        maxRequests: 1
        timeout: 30s 
        trip: consecutiveFailures >= 2

    #  pubsubCB:
    #    maxRequests: 1
    #    interval: 8s
    #    timeout: 45s
    #    trip: consecutiveFailures > 8

  # targets are what named policies are applied to. Dapr supports 3 target types - apps, components and actors
  targets:
    apps:
      capacityplanner:
        timeout: general
        #retry: important
        # circuit breakers for services are scoped app instance.
        # when a breaker is tripped, that route is removed from load balancing for the configured `timeout` duration.
        circuitBreaker: simpleCB
      catalog:
        timeout: general
    components:
      redis-state:
        timeout: general
    #  # for state stores, policies apply to saving and retrieving state.
    #  statestore1: # any component name -- happens to be a state store here
    #    outbound:
    #      timeout: general
    #      retry: retryForever
    #      # circuit breakers for components are scoped per component configuration/instance. For example myRediscomponent.
    #      # when this breaker is tripped, all interaction to that component is prevented for the configured `timeout` duration.
    #      circuitBreaker: simpleCB

    #  pubsub1: # any component name -- happens to be a pubsub broker here
    #    outbound:
    #      retry: pubsubRetry
    #      circuitBreaker: pubsubCB

    #  pubsub2: # any component name -- happens to be another pubsub broker here
    #    outbound:
    #      retry: pubsubRetry
    #      circuitBreaker: pubsubCB
    #    inbound: # inbound only applies to delivery from sidecar to app
    #      timeout: general
    #      retry: important
    #      circuitBreaker: pubsubCB

